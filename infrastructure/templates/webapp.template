{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Example stack, composed using other nested stacks",
  "Parameters": {
    "TemplatesBucket": {
      "Description": "Bucket with CloudFormation templates.",
      "Type": "String",
      "Default": "fp-aws-tools"
    },
    "ArtifactsBucket": {
      "Description": "Bucket with deployment artifacts.",
      "Type": "String",
      "Default": "fp-aws-tools"
    },
    "BastionHostKeyPair": {
      "Description": "Keypair for ssh to bastion host.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "awstools"
    },
    "ApplicationName": {
      "Description": "Name of the application",
      "Type": "String",
      "Default": "example"
    },
    "DBMasterUsername": {
      "Type": "String",
      "Default": "postgres"
    },
    "DBMasterPassword": {
      "Type": "String",
      "Default": "postgres"
    },
    "InstanceType": {
      "Description": "The EC2 instance type",
      "Type": "String",
      "Default": "t2.micro"
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": {
        "AMIID": "ami-5f59ac34"
      },
      "us-west-2": {
        "AMIID": "ami-c188b0f1"
      },
      "eu-west-1": {
        "AMIID": "ami-3db4ca4a"
      },
      "ap-northeast-1": {
        "AMIID": "ami-ca01d8ca"
      },
      "ap-southeast-2": {
        "AMIID": "ami-5b5d2661"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "TemplatesBucket"
              },
              "/templates/vpc.template"
            ]
          ]
        }
      }
    },
    "NAT": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "TemplatesBucket"
              },
              "/templates/nat.template"
            ]
          ]
        },
        "Parameters": {
          "VpcId": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.VpcId"
            ]
          },
          "PrivateSubnet1Id": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet1Id"
            ]
          },
          "PrivateSubnet2Id": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet2Id"
            ]
          },
          "PrivateSubnet3Id": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet3Id"
            ]
          },
          "PublicSubnet1Id": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PublicSubnet1Id"
            ]
          }
        }
      }
    },
    "Bastion": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://s3.amazonaws.com/",
              {
                "Ref": "TemplatesBucket"
              },
              "/templates/bastion.template"
            ]
          ]
        },
        "Parameters": {
          "VpcId": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.VpcId"
            ]
          },
          "PublicSubnet1Id": {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PublicSubnet1Id"
            ]
          },
          "Keypair": {
            "Ref": "BastionHostKeyPair"
          }
        }
      }
    },
    "WebappLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPC",
            "Outputs.VpcId"
          ]
        },
        "GroupDescription": "ELB security group",
        "Tags": [
          {
            "Key": "Name",
            "Value": "ELB security group"
          }
        ],
        "SecurityGroupIngress": {
          "IpProtocol": "-1",
          ""
        }
      }
    },
    "BackendSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPC",
            "Outputs.VpcId"
          ]
        },
        "GroupDescription": "Backend security group",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Backend security group"
          }
        ],
        "SecurityGroupIngress": {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }
      }
    },
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "ECSClusterAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet1Id"
            ],
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet2Id"
            ],
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PrivateSubnet3Id"
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "ECSClusterLaunchConfiguration"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1"
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "ECSClusterLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=",
                      {
                        "Ref": "ECSCluster"
                      },
                      " >> /etc/ecs/ecs.config"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ECSClusterLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource ECSClusterLaunchConfiguration ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMIID"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "ECSInstanceProfile"
        },
        "KeyName": {
          "Ref": "BastionHostKeyPair"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ECSClusterLaunchConfiguration ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ECSClusterAutoScalingGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "SecurityGroups": [
          {
            "Ref": "BackendSecurityGroup"
          }
        ]
      }
    },
    "ECSInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ECSIAMRole"
          }
        ]
      }
    },
    "ECSIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": "*"
                },
                {
                  "Resource": "arn:aws:logs:*:*:*",
                  "Action": [
                    "logs:Create*",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "WebappLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "Subnets": [
          {
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PublicSubnet1Id"
            ],
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PublicSubnet2Id"
            ],
            "Fn::GetAtt": [
              "VPC",
              "Outputs.PublicSubnet3Id"
            ]
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "5"
        },
        "SecurityGroups": [
          {
            "Ref": "WebappLoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "WebappTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "webapp",
            "Image": "kanicz/aws-microservices-playground",
            "Memory": "768",
            "PortMappings": [
              {
                "HostPort": 80,
                "ContainerPort": 8080
              }
            ],
            "Links": [
              "cloudwatchlogs"
            ]
          },
          {
            "Name": "cloudwatchlogs",
            "Image": "kanicz/ecs-cloudwatch-logs",
            "Memory": "64",
            "MountPoints": [
              {
                "SourceVolume": "ecs_instance_logs",
                "ContainerPath": "/mnt/ecs_instance_logs"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "ecs_instance_logs",
            "Host": {
              "SourcePath": "/var/log"
            }
          }
        ]
      }
    },
    "WebappService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ECSClusterAutoScalingGroup"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": "1",
        "LoadBalancers": [
          {
            "ContainerName": "webapp",
            "ContainerPort": "8080",
            "LoadBalancerName": {
              "Ref": "WebappLoadBalancer"
            }
          }
        ],
        "Role": {
          "Ref": "ECSServiceRole"
        },
        "TaskDefinition": {
          "Ref": "WebappTask"
        }
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "BastionHostIP": {
      "Value": {
        "Fn::GetAtt": [
          "Bastion",
          "Outputs.BastionHostIP"
        ]
      }
    }
  }
}
