{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Example ECS Cluster with several microservices inside.",
  "Parameters": {
    "InstanceType": {
      "Description": "The EC2 instance type inside ECS cluster.",
      "Type": "String",
      "Default": "t2.small"
    },
    "VpcId": {
      "Description": "VPC Id",
      "Type": "AWS::EC2::VPC::Id"
    },
    "ClusterSize": {
      "Description": "ECS Cluster size",
      "Type": "Number",
      "Default": 4
    },
    "PrivateSubnet1Id": {
      "Description": "Private subnet 1 Id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet2Id": {
      "Description": "Private subnet 2 Id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet3Id": {
      "Description": "Private subnet 3 Id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet1Id": {
      "Description": "Public subnet 1 id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2Id": {
      "Description": "Public subnet 2 id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet3Id": {
      "Description": "Public subnet 3 id",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "KeyName": {
      "Description": "keypair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },
  "Resources": {
    "EcsCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "EcsClusterAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet1Id"
          },
          {
            "Ref": "PrivateSubnet2Id"
          },
          {
            "Ref": "PrivateSubnet3Id"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "EcsClusterLaunchConfiguration"
        },
        "MinSize": {
          "Ref": "ClusterSize"
        },
        "MaxSize": {
          "Ref": "ClusterSize"
        },
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "EcsClusterLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "01_add_instance_to_cluster": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "echo ECS_CLUSTER=",
                      {
                        "Ref": "EcsCluster"
                      },
                      " >> /etc/ecs/ecs.config"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.EcsClusterLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource EcsClusterLaunchConfiguration ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-3db4ca4a",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "EcsInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource EcsClusterLaunchConfiguration ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource EcsClusterAutoScalingGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ]
      }
    },
    "EcsServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EcsIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecs-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": "*"
                },
                {
                  "Resource": "arn:aws:logs:*:*:*",
                  "Action": [
                    "logs:Create*",
                    "logs:PutLogEvents",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams"
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EcsIamRole"
          }
        ]
      }
    },
    "WebappLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "ELB security group",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Webapp ELB security group"
          }
        ],
        "SecurityGroupIngress": {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Ecs security group",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Ecs security group"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "WebappLoadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8761",
            "ToPort": "8761",
            "SourceSecurityGroupId": {
              "Ref": "EurekaServerLoadBalancerSecurityGroup"
            }
          }
        ]
      }
    },
    "EcsSelfIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "EcsSecurityGroup",
            "GroupId"
          ]
        },
        "GroupId": {
          "Fn::GetAtt": [
            "EcsSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "WebappLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "Subnets": [
          {
            "Ref": "PublicSubnet1Id"
          },
          {
            "Ref": "PublicSubnet2Id"
          },
          {
            "Ref": "PublicSubnet3Id"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/health",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "5"
        },
        "SecurityGroups": [
          {
            "Ref": "WebappLoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "WebappTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "webapp",
            "Image": "kanicz/microservices-webapp",
            "Memory": "1024",
            "Environment": [
              {
                "Name": "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "EurekaServerLoadBalancer",
                          "DNSName"
                        ]
                      },
                      ":8761/eureka/"
                    ]
                  ]
                }
              },
              {
                "Name": "EUREKA_INSTANCE_HOSTNAME",
                "Value": "${local-ipv4:N/A}"
              },
              {
                "Name": "SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED",
                "Value": "true"
              },
              {
                "Name": "SPRING_CLOUD_CONFIG_DISCOVERY_SERVICEID",
                "Value": "config-server"
              },
              {
                "Name": "SPRING_PROFILES_ACTIVE",
                "Value": "syslog"
              }
            ],
            "PortMappings": [
              {
                "HostPort": 80,
                "ContainerPort": 8080
              }
            ],
            "Links": [
              "logs"
            ]
          },
          {
            "Name": "logs",
            "Image": "kanicz/ecs-cloudwatch-logs",
            "Memory": "64",
            "MountPoints": [
              {
                "SourceVolume": "ecs_instance_logs",
                "ContainerPath": "/mnt/ecs_instance_logs"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "ecs_instance_logs",
            "Host": {
              "SourcePath": "/var/log"
            }
          }
        ]
      }
    },
    "WebappService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "EcsClusterAutoScalingGroup"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": "1",
        "LoadBalancers": [
          {
            "ContainerName": "webapp",
            "ContainerPort": "8080",
            "LoadBalancerName": {
              "Ref": "WebappLoadBalancer"
            }
          }
        ],
        "Role": {
          "Ref": "EcsServiceRole"
        },
        "TaskDefinition": {
          "Ref": "WebappTask"
        }
      }
    },
    "WeatherServiceTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "service",
            "Image": "kanicz/microservices-weather-service",
            "Memory": "1024",
            "Environment": [
              {
                "Name": "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "EurekaServerLoadBalancer",
                          "DNSName"
                        ]
                      },
                      ":8761/eureka/"
                    ]
                  ]
                }
              },
              {
                "Name": "EUREKA_INSTANCE_HOSTNAME",
                "Value": "${local-ipv4:N/A}"
              },
              {
                "Name": "SPRING_CLOUD_CONFIG_DISCOVERY_ENABLED",
                "Value": "true"
              },
              {
                "Name": "SPRING_CLOUD_CONFIG_DISCOVERY_SERVICEID",
                "Value": "config-server"
              },
              {
                "Name": "SPRING_PROFILES_ACTIVE",
                "Value": "syslog"
              }
            ],
            "PortMappings": [
              {
                "HostPort": 8081,
                "ContainerPort": 8081
              }
            ],
            "Links": [
              "logs"
            ]
          },
          {
            "Name": "logs",
            "Image": "kanicz/ecs-cloudwatch-logs",
            "Memory": "64",
            "MountPoints": [
              {
                "SourceVolume": "ecs_instance_logs",
                "ContainerPath": "/mnt/ecs_instance_logs"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "ecs_instance_logs",
            "Host": {
              "SourcePath": "/var/log"
            }
          }
        ]
      }
    },
    "WeatherServiceService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "EcsClusterAutoScalingGroup"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": "1",
        "TaskDefinition": {
          "Ref": "WeatherServiceTask"
        }
      }
    },
    "EurekaServerLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "ELB security group",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Eureka ELB security group"
          }
        ],
        "SecurityGroupIngress": {
          "IpProtocol": "tcp",
          "FromPort": "8761",
          "ToPort": "8761",
          "CidrIp": "0.0.0.0/0"
        }
      }
    },
    "EurekaServerLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": true,
        "Subnets": [
          {
            "Ref": "PublicSubnet1Id"
          },
          {
            "Ref": "PublicSubnet2Id"
          },
          {
            "Ref": "PublicSubnet3Id"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "8761",
            "InstancePort": "8761",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8761/health",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "10",
          "Interval": "30",
          "Timeout": "5"
        },
        "SecurityGroups": [
          {
            "Ref": "EurekaServerLoadBalancerSecurityGroup"
          }
        ]
      }
    },
    "EurekaServerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "eureka-server",
            "Image": "kanicz/microservices-eureka-server",
            "Memory": "1024",
            "Environment": [
              {
                "Name": "SPRING_PROFILES_ACTIVE",
                "Value": "syslog"
              }
            ],
            "PortMappings": [
              {
                "HostPort": 8761,
                "ContainerPort": 8761
              }
            ],
            "Links": [
              "logs"
            ]
          },
          {
            "Name": "logs",
            "Image": "kanicz/ecs-cloudwatch-logs",
            "Memory": "64",
            "MountPoints": [
              {
                "SourceVolume": "ecs_instance_logs",
                "ContainerPath": "/mnt/ecs_instance_logs"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "ecs_instance_logs",
            "Host": {
              "SourcePath": "/var/log"
            }
          }
        ]
      }
    },
    "EurekaServerService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "EcsClusterAutoScalingGroup"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": "1",
        "LoadBalancers": [
          {
            "ContainerName": "eureka-server",
            "ContainerPort": "8761",
            "LoadBalancerName": {
              "Ref": "EurekaServerLoadBalancer"
            }
          }
        ],
        "Role": {
          "Ref": "EcsServiceRole"
        },
        "TaskDefinition": {
          "Ref": "EurekaServerTask"
        }
      }
    },
    "ConfigServerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "config-server",
            "Image": "kanicz/microservices-config-server",
            "Memory": "1024",
            "Environment": [
              {
                "Name": "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE",
                "Value": {
                  "Fn::Join": [
                    "",
                    [
                      "http://",
                      {
                        "Fn::GetAtt": [
                          "EurekaServerLoadBalancer",
                          "DNSName"
                        ]
                      },
                      ":8761/eureka/"
                    ]
                  ]
                }
              },
              {
                "Name": "EUREKA_INSTANCE_HOSTNAME",
                "Value": "${local-ipv4:N/A}"
              },
              {
                "Name": "SPRING_PROFILES_ACTIVE",
                "Value": "syslog"
              }
            ],
            "PortMappings": [
              {
                "HostPort": 9000,
                "ContainerPort": 9000
              }
            ],
            "Links": [
              "logs"
            ]
          },
          {
            "Name": "logs",
            "Image": "kanicz/ecs-cloudwatch-logs",
            "Memory": "64",
            "MountPoints": [
              {
                "SourceVolume": "ecs_instance_logs",
                "ContainerPath": "/mnt/ecs_instance_logs"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "ecs_instance_logs",
            "Host": {
              "SourcePath": "/var/log"
            }
          }
        ]
      }
    },
    "ConfigServerService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "EcsClusterAutoScalingGroup"
      ],
      "Properties": {
        "Cluster": {
          "Ref": "EcsCluster"
        },
        "DesiredCount": "1",
        "TaskDefinition": {
          "Ref": "ConfigServerTask"
        }
      }
    }
  },
  "Outputs": {
    "WebappUrl": {
      "Value": {
        "Fn::GetAtt": [
          "WebappLoadBalancer",
          "DNSName"
        ]
      }
    },
    "EurekaUrl": {
      "Value": {
        "Fn::GetAtt": [
          "EurekaServerLoadBalancer",
          "DNSName"
        ]
      }
    }
  }
}
